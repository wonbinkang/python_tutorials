Introduction to Shell for Data Science

## How does the shell compare to a desktop interface?
An operating system like Windows, Linux, or Mac OS is a special kind of program. It controls the computer's processor, hard drive, and network connection, but its most important job is to run other programs.

Since human beings aren't digital, they need an interface to interact with the operating system. The most common one these days is a graphical file explorer, which translates clicks and double-clicks into commands to open files and run programs. Before computers had graphical displays, though, people typed instructions into a program called a command-line shell. Each time a command is entered, the shell runs some other programs, prints their output in human-readable form, and then displays a prompt to signal that it's ready to accept the next command. (Its name comes from the notion that it's the "outer shell" of the computer.)

Typing commands instead of clicking and dragging may seem clumsy at first, but as you will see, once you start spelling out what you want the computer to do, you can combine old commands to create new ones and automate repetitive operations with just a few keystrokes.

The following commands are based off of the Unix command lines. The Windows equivalents can be found online and in parentheses where possible. Further note that the Windows command prompt uses forward slashes (\) between directory hierarchies. 

## Where am I? pwd (cd) Note that cd also works to change the current directory in Windows. 
The filesystem manages files and directories (or folders). Each is identified by an absolute path that shows how to reach it from the filesystem's root directory: /home/repl is the directory repl in the directory home, while /home/repl/course.txt is a file course.txt in that directory, and / on its own is the root directory.

To find out where you are in the filesystem, run the command pwd (short for "print working directory"). This prints the absolute path of your current working directory, which is where the shell runs commands and looks for files by default.

## How can I identify files and directories? ls (dir)
pwd tells you where you are. To find out what's there, type ls (which is short for "listing") and press the enter key. On its own, ls lists the contents of your current directory (the one displayed by pwd). If you add the names of some files, ls will list them, and if you add the names of directories, it will list their contents. For example, ls /home/repl shows you what's in your starting directory (usually called your home directory).

## How else can I identify files and directories? ls (dir) coupled with a relative path
An absolute path is like a latitude and longitude: it has the same value no matter where you are. A relative path, on the other hand, specifies a location starting from where you are: it's like saying "20 kilometers north".

For example, if you are in the directory '/home/repl', the relative path 'seasonal' specifies the same directory as '/home/repl/seasonal', while 'seasonal/winter.csv' specifies the same file as '/home/repl/seasonal/winter.csv'. The shell decides if a path is absolute or relative by looking at its first character: if it begins with /, it is absolute, and if it doesn't, it is relative.

## How can I move to another directory? cd (cd, Windows uses the same command)
Just as you can move around in a file browser by double-clicking on folders, you can move around in the filesystem using the command cd (which stands for "change directory").

If you type cd seasonal and then type pwd, the shell will tell you that you are now in /home/repl/seasonal. If you then run ls on its own, it shows you the contents of /home/repl/seasonal, because that's where you are. If you want to get back to your home directory /home/repl, you can use the command cd /home/repl.

## How can I move up a directory? cd.. (cd.. same in Windows)
The parent of a directory is the directory above it. For example, '/home' is the parent of '/home/repl', and '/home/repl' is the parent of '/home/repl/seasonal'. You can always give the absolute path of your parent directory to commands like 'cd' and 'ls'. More often, though, you will take advantage of the fact that the special path '..' (two dots with no spaces) means "the directory above the one I'm currently in". If you are in '/home/repl/seasonal', then 'cd ..' moves you up to '/home/repl'. If you use 'cd ..' once again, it puts you in '/home'. One more 'cd ..' puts you in the root directory '/', which is the very top of the filesystem. (Remember to put a space between 'cd' and '..' - it is a command and a path, not a single four-letter command.)

A single dot on its own, '.', always means "the current directory", so 'ls' on its own and 'ls .' do the same thing, while 'cd .' has no effect (because it moves you into the directory you're currently in).

One final special path is '~' (the tilde character), which means "your home directory", such as '/home/repl'. No matter where you are, 'ls ~' will always list the contents of your home directory, and 'cd ~' will always take you home.

Note that the closest equivalent to the Linux 'cd ~' is 'cd /d %USERPROFILE%' in Windows. Not very user friendly. 

Consider the following code: 'cd ~/../.' In what directory would you find yourself if '/home/repl' is the home directory? 
To home directory; up one directory; stay. Therefore, '/home'

## How can I copy files? cp (copy in Windows)
You will often want to copy files, move them into other directories to organize them, or rename them. One command to do this is 'cp', which is short for "copy". If 'original.txt' is an existing file, then:

'cp original.txt duplicate.txt'
creates a copy of 'original.txt' called 'duplicate.txt'. If there already was a file called 'duplicate.txt', it is overwritten. If the last parameter to 'cp' is an existing directory, then a command like:

'cp seasonal/autumn.csv seasonal/winter.csv backup'
copies all of the files into that directory.

Copy summer.csv to summer.bck in directory backup
$ cp seasonal/summer.cvs backup/summer.bck

Copy spring.csv and summer.csv to directory backup
$ cp seasonal/spring.csv seasonal/summer.csv backup 

## How can I move a file? mv (move)
While 'cp' copies a file, 'mv' moves it from one directory to another, just as if you had dragged it in a graphical file browser. It handles its parameters the same way as 'cp', so the command:

$ mv autumn.csv winter.csv ..

moves the files 'autumn.csv' and 'winter.csv' from the current working directory up one level to its parent directory (because .. always refers to the directory above your current location).

You are in '/home/repl', which has sub-directories 'seasonal' and 'backup'. Using a single command, move 'spring.csv' and 'summer.csv' from 'seasonal' to 'backup'.

$ mv seasonal/spring.csv seasonal/summer.csv backup

## How can I rename files? mv (move)
'mv' can also be used to rename files. If you run:

$ mv course.txt old-course.txt

then the file 'course.txt' in the current working directory is "moved" to the file 'old-course.txt'. This is different from the way file browsers work, but is often handy.

One warning: just like 'cp', 'mv' will overwrite existing files. If, for example, you already have a file called 'old-course.txt', then the command shown above will replace it with whatever is in 'course.txt'.

$ cd seasonal
$ mv winter.csv winter.csv.bck
$ ls

## How can I delete files? rm (del)
We can copy files and move them around; to delete them, we use 'rm', which stands for "remove". As with 'cp' and 'mv', you can give 'rm' the names of as many files as you'd like, so:

$ rm thesis.txt backup/thesis-2017-08.txt

removes both 'thesis.txt' and 'backup/thesis-2017-08.txt'

'rm' does exactly what its name says, and it does it right away: unlike graphical file browsers, the shell doesn't have a trash can, so when you type the command above, your thesis is gone for good.

$ cd seasonal
$ rm autumn.csv
$ cd ~
$ rm seasonal/summer.csv

## How can I create and delete directories? mkdir, rmdir (mkdir, rmdir)
'mv' treats directories the same way it treats files: if you are in your home directory and run 'mv seasonal by-season', for example, 'mv' changes the name of the seasonal directory to 'by-season'. However, 'rm' works differently.

If you try to 'rm' a directory, the shell prints an error message telling you it can't do that, primarily to stop you from accidentally deleting an entire directory full of work. Instead, you can use a separate command called 'rmdir'. For added safety, it only works when the directory is empty, so you must delete the files in a directory before you delete the directory. (Experienced users can use the -r option to rm to get the same effect; we will discuss command options in the next chapter.)

Note that we're in the '/home/repl' directory which contains 'backup', 'bin', 'course.txt', 'people', 'seasonal'. 
$ rm people/agarwal.txt
$ rmdir people
$ mkdir yearly
$ mkdir yearly/2017

## Wrapping up
You will often create intermediate files when analyzing data. Rather than storing them in your home directory, you can put them in '/tmp', which is where people and programs often keep files they only need briefly. (Note that '/tmp' is immediately below the root directory '/', not below your home directory.) This wrap-up exercise will show you how to do that.

$ cd /tmp
$ ls
$ mkdir scratch
# The above code creates a directory scratch inside the /tmp directory.

# Move /home/repl/people/agarwal.txt into /tmp/scratch. 
$ mv ~/people/agarwal.txt scratch

## How can I view a file's contents? cat (type)
Before you rename or delete files, you may want to have a look at their contents. The simplest way to do this is with cat, which just prints the contents of files onto the screen. (Its name is short for "concatenate", meaning "to link things together", since it will print all the files whose names you give it, one after the other.)

From the home directory '/home/repl'
$ cat course.txt

## How can I view a file's contents piece by piece? less (more)
You can use cat to print large files and then scroll through the output, but it is usually more convenient to page the output. The original command for doing this was called 'more', but it has been superseded by a more powerful command called 'less'. (This kind of naming is what passes for humor in the Unix world.) When you 'less' a file, one page is displayed at a time; you can press spacebar to page down or type 'q' to quit.

If you give less the names of several files, you can type ':n' (colon and a lower-case 'n') to move to the next file, ':p' to go back to the previous one, or ':q' to quit.

$ less seasonal/spring.csv seasonal/summer.csv

## How can I look at the start of a file? head (No equivalent in Windows)
The first thing most data scientists do when given a new dataset to analyze is figure out what fields it contains and what values those fields have. If the dataset has been exported from a database or spreadsheet, it will often be stored as comma-separated values (CSV). A quick way to figure out what it contains is to look at the first few rows.

We can do this in the shell using a command called 'head'. As its name suggests, it prints the first few lines of a file (where "a few" means 10), so the command:

$ head seasonal/summer.csv

prints the first 10 lines of the file.

$ head -n 3 seasonal/summer.csv

prints the first 3 lines of the file. The -n is called the command-line flag and controls the parameters of the command. 

## How can I list everything below a directory? ls -R
In order to see everything underneath a directory, no matter how deeply nested it is, you can give ls the flag -R (which means "recursive"). 

To help you know what is what, ls has another flag -F that prints a / after the name of every directory and a * after the name of every runnable program. 

$ ls -R -F /home/repl 
Note that the order of flags doesn't matter but the home directory must come at the end. 

## How can I get help for a command? man (help)
To find out what commands do, people used to use the 'man' command (short for "manual"). For example, the command 'man head' brings up this information:

HEAD(1)               BSD General Commands Manual              HEAD(1)

NAME
     head -- display first lines of a file

SYNOPSIS
     head [-n count | -c bytes] [file ...]

DESCRIPTION
     This filter displays the first count lines or bytes of each of
     the specified files, or of the standard input if no files are
     specified.  If count is omitted it defaults to 10.

     If more than a single file is specified, each file is preceded by
     a header consisting of the string ``==> XXX <=='' where ``XXX''
     is the name of the file.

SEE ALSO
     tail(1)

'man' automatically invokes 'less', so you may need to press spacebar to page through the information and ':q' to quit.

The one-line description under 'NAME' tells you briefly what the command does, and the summary under 'SYNOPSIS' lists all the flags it understands. Anything that is optional is shown in square brackets '[...]', either/or alternatives are separated by '|', and things that can be repeated are shown by '...', so 'head''s manual page is telling you that you can either give a line count with '-n' or a byte count with '-c', and that you can give it any number of filenames.

Read the manual for 'tail'. 
$ man tail
$ tail -n +7 seasonal/spring.csv
Prints all but the first six lines, i.e. first six lines are skipped. 

## How can I select columns from a file? cut (no equivalent in Windows)
'head' and 'tail' let you select rows from a text file. If you want to select columns, you can use the command 'cut'. It has several options (use man cut to explore them), but the most common is something like:

$ cut -f 2-5,8 -d , values.csv

which means "select columns 2 through 5 and column 8, using comma as the separator". 'cut' uses '-f' (meaning "fields") to specify columns and '-d' (meaning "delimiter") to specify the separator. You need to specify the latter because some files may use spaces, tabs, or colons to separate columns.

$ cut -d, -f1 seasonal/spring.csv
$ cut -d , -f 1 seasonal/spring.csv
Both codes print the first column of 'spring.csv'.

Note that unlike other csv parsing programs, the shell's 'cut' command will not be able to distinguish commas within and without quotations. If, for example, your file is:

Name,Age
"Johel,Ranjit",28
"Sharma,Rupinder",26

then:

$ cut -f 2 -d , everyone.csv

will produce:

Age
Ranjit"
Rupinder"

## How can I repeat commands? history (doskey / h)
One of the biggest advantages of using the shell is that it makes it easy for you to do things over again. If you run some commands, you can then press the up-arrow key to cycle back through them. You can also use the left and right arrow keys and the delete key to edit them. Pressing return will then run the modified command.

Even better, 'history' will print a list of commands you have run recently. Each one is preceded by a serial number to make it easy to re-run particular commands: just type '!55' to re-run the 55th command in your history (if you have that many). You can also re-run a command by typing an exclamation mark followed by the command's name, such as '!head' or '!cut', which will re-run the most recent use of that command.

## How can I select lines containing specific values? grep (find in Windows)
'head' and 'tail' select rows, 'cut' selects columns, and 'grep' selects lines according to what they contain. In its simplest form, 'grep' takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text. For example, 'grep bicuspid seasonal/winter.csv' prints lines from 'winter.csv' that contain "bicuspid".

'grep' can search for patterns as well; we will explore those in the next course. What's more important right now is some of 'grep''s more common flags:

'-c': print a count of matching lines rather than the lines themselves
'-h': do not print the names of files when searching multiple files
'-i': ignore case (e.g., treat "Regression" and "regression" as matches)
'-l': print the names of files that contain matches, not the matches
'-n': print line numbers for matching lines
'-v': invert the match, i.e., only show lines that don't match

$ grep molar seasonal/autumn.csv
$ grep -v -n molar seasonal/spring.csv
$ grep -c incisor seasonal/autumn.csv seasonal/winter.csv

## How can I store a command's output in a file? Use '>' (same for Windows)
All of the tools you have seen so far let you name input files. Most don't have an option for naming an output file because they don't need one. Instead, you can use redirection to save any command's output anywhere you want. If you run this command:

$ head -n 5 seasonal/summer.csv

it prints the first 5 lines of the summer data on the screen. If you run this command instead:

$ head -n 5 seasonal/summer.csv > top.csv

nothing appears on the screen. Instead, head's output is put in a new file called 'top.csv'. You can take a look at that file's contents using cat:

$ cat top.csv

The greater-than sign '>' tells the shell to redirect head's output to a file. It isn't part of the head command; instead, it works with every shell command that produces output.

$ tail -n 5 seasonal/winter.csv > last.csv

## What's a better way to combine commands? Use the pipe '|' (same in Windows)
Using redirection to combine commands has two drawbacks:

	1) It leaves a lot of intermediate files lying around (like 'top.csv').
	2) The commands to produce your final result are scattered across several lines of history.

The shell provides another tool that solves both of these problems at once called a pipe. Once again, start by running 'head':

$ head -n 5 seasonal/summer.csv

Instead of sending 'head''s output to a file, add a vertical bar and the 'tail' command without a filename:

$ head -n 5 seasonal/summer.csv | tail -n 3

The pipe symbol tells the shell to use the output of the command on the left as the input to the command on the right.

Use cut to select all of the tooth names from column 2 of the comma delimited file seasonal/summer.csv, then pipe the result to grep, with an inverted match, to exclude the header line containing the word "Tooth".

$ cut -d , -f 2 seasonal/summer.csv | grep -v Tooth

Further, you can string pipes together much like the %>% in dplyr

$ cut -d , -f 2 seasonal/summer.csv | grep -v Tooth | head -n 1

## How can I count the records in a file?
The command 'wc' (short for "word count") prints the number of characters, words, and lines in a file. You can make it print only one of these using '-c', '-w', or '-l' respectively.

$ grep 2017-07 seasonal/spring.csv | wc -l

## How can I specify many files at once? Use the regex * (same in Windows)
Most shell commands will work on multiple files if you give them multiple filenames. For example, you can get the first column from all of the seasonal data files at once like this:

$ cut -d , -f 1 seasonal/winter.csv seasonal/spring.csv seasonal/summer.csv seasonal/autumn.csv

But typing the names of many files over and over is a bad idea: it wastes time, and sooner or later you will either leave a file out or repeat a file's name. To make your life better, the shell allows you to use wildcards to specify a list of files with a single expression. The most common wildcard is '*', which means "match zero or more characters". Using it, we can shorten the cut command above to this:

$ cut -d , -f 1 seasonal/*
$ cut -d , -f 1 seasonal/*.csv
$ head -n 3 seasonal/s*.csv

## How can I sort lines of text? sort (same in Windows)
As its name suggests, 'sort' puts data in order. By default it does this in ascending alphabetical order, but the flags '-n' and '-r' can be used to sort numerically and reverse the order of its output, while '-b' tells it to ignore leading blanks and '-f' tells it to fold case (i.e., be case-insensitive). Pipelines often use grep to get rid of unwanted records and then sort to put the remaining records in order.

$ cut -d , -f 2 seasonal/summer.csv | grep -v Tooth

or

$ cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort -r

## How can I remove duplicate lines? uniq (nothing in Windows)
Another command that is often used with 'sort' is 'uniq', whose job is to remove duplicated lines. More specifically, it removes adjacent duplicated lines. If a file contains:

2017-07-03
2017-07-03
2017-08-03
2017-08-03

then 'uniq' will produce:

2017-07-03
2017-08-03

but if it contains:

2017-07-03
2017-08-03
2017-07-03
2017-08-03

then 'uniq' will print all four lines. The reason is that 'uniq' is built to work with very large files. In order to remove non-adjacent lines from a file, it would have to keep the whole file in memory (or at least, all the unique lines seen so far). By only removing adjacent duplicates, it only has to keep the most recent unique line in memory.

Write a pipeline to:
	- get the second column from seasonal/winter.csv,
	- remove the word "Tooth" from the output so that only tooth names are displayed,
	- sort the output so that all occurrences of a particular tooth name are adjacent; and
	- display each tooth name once along with a count of how often it occurs.

$ cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c

## How can I save the output of a pipe? Use redirection '>' (same in Windows)
The shell lets us redirect the output of a sequence of piped commands:

$ cut -d , -f 2 seasonal/*.csv | grep -v Tooth > teeth-only.txt

However, > must appear at the very end or the very beginning of the pipeline.

$ >result.txt head -n 3 seasonal/winter.csv

## How can I stop a running program? 'Ctrl C', or in Unix '^C' (Windows
The commands and scripts that you have run so far have all executed quickly, but some tasks will take minutes, hours, or even days to complete. You may also mistakenly put redirection in the middle of a pipeline, causing it to hang up. If you decide that you don't want a program to keep running, you can type Ctrl + C to end it. This is often written ^C in Unix documentation; note that the 'c' can be lower-case.

## Wrapping up
To wrap up, you will build a pipeline to find out how many records are in the shortest of the seasonal data files.

$ wc -l seasonal/*.csv | sort -n | head -n 1

## How does the shell store information?
Like other programs, the shell stores information in VARIABLES. Some of these, called environment variables, are available all the time. Environment variables' names are conventionally written in upper case, and a few of the more commonly-used ones are shown below.

Variable	Purpose					Value
HOME		User's home directory			/home/repl
PWD		Present working directory		Same as pwd command
SHELL		Which shell program is being used	/bin/bash
USER		User's ID				repl

To get a complete list (which is quite long), you can type 'set' in the shell.

How many previous commands are stored in history? 
$ set | grep HISTFILESIZE

## How can I print a variable's value? echo $PATH (set PATH in Windows)
A simpler way to find a variable's value is to use a command called echo, which prints its arguments. Typing

$ echo hello DataCamp!

prints

$ hello DataCamp!

If you try to use it to print a variable's value like this:

$ echo USER

it will print the variable's name, 'USER'.

To get the variable's value, you must put a dollar sign '$' in front of it. Typing

$ echo $USER

prints

$ repl

This is true everywhere: to get the value of a variable called X, you must write $X. (This is so that the shell can tell whether you mean "a file named X" or "the value of a variable named X".)

$ echo $OSTYPE
Prints out the OS of the user. 

## How else does the shell store information?
The other kind of variable is called a shell variable, which is like a local variable in a programming language.

To create a shell variable, you simply assign a value to a name:

training=seasonal/summer.csv
without any spaces before or after the = sign. Once you have done this, you can check the variable's value with:

echo $training
seasonal/summer.csv

## How else does the shell store information? 
The other kind of variable is called a 'shell variable', which is like a local variable in a programming language.

To create a shell variable, you simply assign a value to a name:

$ training=seasonal/summer.csv

without any spaces before or after the = sign. Once you have done this, you can check the variable's value with:

$ echo $training

then output is:

$ seasonal/summer.csv

Example:
$ testing=seasonal/winter.csv
$ head -n 1 $testing
Do NOT forget about the '$' infrom of the environment and shell variable before attempting to read. 

## How can I repeat a command many times?
Shell variables are also used in loops, which repeat commands many times. If we run this command:

$ for filetype in gif jpg png; do echo $filetype; done

it produces:

$ gif
$ jpg
$ png

Notice these things about the loop:

	- The structure is `for` ...variable... `in` ...list... ; `do` ...body... ; `done`
	- The list of things the loop is to process (in our case, the words 'gif', 'jpg', and 'png').
	- The variable that keeps track of which thing the loop is currently processing (in our case, 'filetype').
	- The body of the loop that does the processing (in our case, 'echo $filetype').

Notice that the body uses '$filetype' to get the variable's value instead of just 'filetype', just like it does with any other shell variable. Also notice where the semi-colons go: the first one comes between the list and the keyword 'do', and the second comes between the body and the keyword 'done'.

Examples of various loops

$ for filetype in docx odt pdf; do echo $filetype; done

$ for filename in people/*; do echo $filename; done

$ datasets=seasonal/*.csv
$ for filename in $datasets; do echo $filename; done

## A variable's name versus its value
A common mistake is to forget to use $ before the name of a variable. When you do this, the shell uses the name you have typed rather than the value of that variable.

For example, 

$ files=seasonal/*.csv
$ for f in files; do echo $f; done

will print 'files' because 'files' is read as the variable name and not the values within. 

## How can I run many commands in a single loop?
Printing filenames is useful for debugging, but the real purpose of loops is to do things with multiple files. This loop prints the second line of each data file:

$ for file in seasonal/*.csv; do head -n 2 $file | tail -n 1; done

It has the same structure as the other loops you have already seen: all that's different is that its body is a pipeline of two commands instead of a single command.

Write a loop that produces the same output as

$ grep -h 2017-07 seasonal/*.csv

but uses a loop to process each file separately. Please use 'file' as the name of the loop variable, and remember that the '-h' flag used above tells 'grep' not to print filenames in the output.

$ for file in seasonal/*.csv; do grep -h 2017-07 $file; done

## Why shouldn't I use spaces in filenames?
It's easy and sensible to give files multi-word names like 'July 2017.csv' when you are using a graphical file explorer. However, this causes problems when you are working in the shell. For example, suppose you wanted to rename 'July 2017.csv' to be '2017 July data.csv'. You cannot type:

$ mv July 2017.csv 2017 July data.csv

because it looks to the shell as though you are trying to move four files called 'July', '2017.csv', '2017', and 'July' (again) into a directory called 'data.csv'. Instead, you have to quote the files' names so that the shell treats each one as a single parameter:

$ mv 'July 2017.csv' '2017 July data.csv'

If you have two files called 'current.csv' and 'last year.csv' (with a space in its name) and you type:

$ rm current.csv last year.csv

you will remove 'current.csv' and get an error message stating that 'last' and 'year.csv' do not exist in the directory. 

## How can I do many things in a single loop?
The loops you have seen so far all have a single command or pipeline in their body, but a loop can contain any number of commands. To tell the shell where one ends and the next begins, you must separate them with semi-colons:

$ for f in seasonal/*.csv; do echo $f; head -n 2 $f | tail -n 1; done

Returns:
$ seasonal/autumn.csv
$ 2017-01-05,canine
$ seasonal/spring.csv
$ 2017-01-25,wisdom
$ seasonal/summer.csv
$ 2017-01-11,canine
$ seasonal/winter.csv
$ 2017-01-03,bicuspid

Suppose you forget the semi-colon between the echo and head commands in the previous loop, so that you ask the shell to run:

$ for f in seasonal/*.csv; do echo $f head -n 2 $f | tail -n 1; done
What will the shell do?
Shell will print four lines: "f head -n 2 f" where f is the name of the file

## How can I edit a file?
Unix has a bewildering variety of text editors. For this course, we will use a simple one called 'Nano'. If you type 'nano filename', it will open filename for editing (or create it if it doesn't already exist). You can move around with the arrow keys, delete characters using backspace, and do other operations with control-key combinations:

	Ctrl + K: delete a line.
	Ctrl + U: un-delete a line.
	Ctrl + O: save the file ('O' stands for 'output').
	Ctrl + X: exit the editor.

$ nano names.txt

## How can I record what I just did?
When you are doing a complex analysis, you will often want to keep a record of the commands you used. You can do this with the tools you have already seen:

	1) Run 'history'.
	2) Pipe its output to tail -n 10 (or however many recent steps you want to save).
	3) Redirect that to a file called something like figure-5.history.

This is better than writing things down in a lab notebook because it is guaranteed not to miss any steps. It also illustrates the central idea of the shell: simple tools that produce and consume lines of text can be combined in a wide variety of ways to solve a broad range of problems.

$ cp seasonal/spring.csv seasonal/summer.csv ~
$ ls
Confirms that the two files were moved to the home directory /home/repl
$ grep -h -v Tooth spring.csv summer.csv > temp.csv
$ history | tail -n 4 > steps.txt
Note that two files were created: temp.csv and steps.txt

## How can I save commands to re-run later?
You have been using the shell interactively so far. But since the commands you type in are just text, you can store them in files for the shell to run over and over again. To start exploring this powerful capability, put the following command in a file called 'headers.sh':

$ head -n 1 seasonal/*.csv

This command selects the first row from each of the CSV files in the 'seasonal' directory. Once you have created this file, you can run it by typing:

$ bash headers.sh

This tells the shell (which is just a program called 'bash') to run the commands contained in the file 'headers.sh', which produces the same output as running the commands directly.

Create dates.sh using nano
$ nano dates.sh
	cut -d , -f 1 seasonal/*.csv 
	^o (to output); Enter (to confirm file name); ^x (to exit)
$ bash dates.sh

## How can I re-use pipes?
A file full of shell commands is called a *shell script, or sometimes just a "script" for short. Scripts don't have to have names ending in '.sh', but this lesson will use that convention to help you keep track of which files are scripts.

Scripts can also contain pipes. For example, if 'all-dates.sh' contains this line:

$ cut -d , -f 1 seasonal/*.csv | grep -v Date | sort | uniq

then:

$ bash all-dates.sh > dates.out

will extract the unique dates from the seasonal data files and save them in dates.out.

1) A file 'teeth.sh' in your home directory has been prepared for you, but contains some blanks. Use Nano to edit the file and replace the two ____ placeholders with 'seasonal/*.csv' and '-c' so that this script prints a count of the number of times each tooth name appears in the CSV files in the 'seasonal' directory.
$ nano teeth.sh
	cut -d , -f 2 seasonal/*.csv | grep -v Tooth | sort | uniq -c
	^o (to output); Enter (to confirm file name); ^x (to exit)

2) Use bash to run teeth.sh and > to redirect its output to teeth.out.
$ bash teeth.sh > teeth.out

3) Read output of .sh file
$ cat teeth.out

## How can I pass filenames to scripts?
A script that processes specific files is useful as a record of what you did, but one that allows you to process any files you want is more useful. To support this, you can use the special expression '$@' (dollar sign immediately followed by at-sign) to mean "all of the command-line parameters given to the script". For example, if 'unique-lines.sh' contains this:

$ sort $@ | uniq

then when you run:

$ bash unique-lines.sh seasonal/summer.csv

the shell replaces '$@' with 'seasonal/summer.csv' and processes one file. If you run this:

$ bash unique-lines.sh seasonal/summer.csv seasonal/autumn.csv

1) Edit the script 'count-records.sh' with Nano and fill in the two ____ placeholders with '$@' and '-l' respectively so that it counts the number of lines in one or more files, excluding the first line of each.
$ nano count-records.sh
	tail -q -n +2 $@ | wc -l
	^o (to output); Enter (to confirm file name); ^x (to exit)
$ bash count-records.sh seasonal/*.csv > num-records.out
	
it processes two data files, and so on.

## How can I process a single argument? 
As well as '$@', the shell lets you use '$1', '$2', and so on to refer to specific command-line parameters. You can use this to write commands that feel simpler or more natural than the shell's. For example, you can create a script called 'column.sh' that selects a single column from a CSV file when the user provides the filename as the first parameter and the column as the second:

$ cut -d , -f $2 $1

and then run it using:

$ bash column.sh seasonal/autumn.csv 1

Notice how the script uses the two parameters in reverse order.

The script 'get-field.sh' is supposed to take a filename, the number of the row to select, the number of the column to select, and print just that field from a CSV file. For example:

$ bash get-field.sh seasonal/summer.csv 4 2

should select the second field from line 4 of 'seasonal/summer.csv'. What command should be put in 'get-field.sh' to do that?

$ head -n $2 $1 | tail -n 1 | cut -d , -f $3

## How can one shell script do many things?
Our shells scripts so far have had a single command or pipe, but a script can contain many lines of commands. For example, you can create one that tells you how many records are in the shortest and longest of your data files, i.e., the range of your datasets' lengths.

Note that in Nano, "copy and paste" is achieved by navigating to the line you want to copy, pressing 'CTRL + K' to cut the line, then 'CTRL + U' twice to paste two copies of it.

$ nano range.sh
	wc -l $@ | grep -v total | sort -n | head -n 1 # Sort by number or numerically. grep -v total removes the 'total' record from aggregation. 
	wc -l $@ | grep -v total | sort -n -r | head -n 1  # In descending order sort.
	^o (to output); Enter (to confirm file name); ^x (to exit)
$ bash range.sh seasonal/*.csv > range.out
$ cat range.out
  21 seasonal/autumn.csv
  26 seasonal/winter.csv

## How can I write loops in a shell script?
Shell scripts can also contain loops. You can write them using semi-colons, or split them across lines without semi-colons to make them more readable:

$ # Print the first and last data records of each file.
$ for filename in $@
$ do
$    head -n 2 $filename | tail -n 1
$    tail -n 1 $filename
$ done
(You don't have to indent the commands inside the loop, but doing so makes things clearer.)

The first line of this script is a comment to tell readers what the script does. Comments start with the '#' character and run to the end of the line. Your future self will thank you for adding brief explanations like the one shown here to every script you write.

1) Fill in the placeholders in the script 'date-range.sh' with '$filename' (twice), 'head', and 'tail' so that it prints the first and last date from one or more files.
$ nano date-range.sh
	# Print the first and last data records of each file.
	for filename in $@
	do
	    cut -d , -f 1 $filename | grep -v Date | sort | head -n 1
	    cut -d , -f 1 $filename | grep -v Date | sort | tail -n 1
	done
	^o (to output); Enter (to confirm file name); ^x (to exit)

2) Run 'date-range.sh' on all four of the seasonal data files using 'seasonal/*.csv' to match their names, and pipe its output to 'sort' to see that your scripts can be used just like Unix's built-in commands.
$ bash date-range.sh seasonal/*.csv | sort

## What happens when I don't provide filenames?
A common mistake in shell scripts (and interactive commands) is to put filenames in the wrong place. If you type:

$ tail -n 3

then since tail hasn't been given any filenames, it waits to read input from your keyboard. This means that if you type:

$ head -n 5 | tail -n 3 somefile.txt

then 'tail' goes ahead and prints the last three lines of 'somefile.txt', but 'head' waits forever for keyboard input, since it wasn't given a filename and there isn't anything ahead of it in the pipeline.

Suppose you do accidentally type:

$ head -n 5 | tail -n 3 somefile.txt

What should you do next? Ctrl + c






