conda Essentials from DataCamp

## What are packages and why are they needed?
Conda packages are files containing a bundle of resources: usually libraries and executables, but not always. In principle, Conda packages can include data, images, notebooks, or other assets. The command-line tool conda is used to install, remove and examine packages; other tools such as the GUI Anaconda Navigator also expose the same capabilities. This course focuses on the conda tool itself (you'll see use cases other than package management in later chapters).

Conda packages are most widely used with Python, but that's not all. Nothing about the Conda package format or the conda tool itself assumes any specific programming language. Conda packages can also be used for bundling libraries in other languages (like R, Scala, Julia, etc.) or simply for distributing pure binary executables generated from any programming language.

One of the powerful aspects of conda?both the tool and the package format?is that dependencies are taken care of. That is, when you install any Conda package, any other packages needed get installed automatically. Tracking and determining software dependencies is a hard problem that package managers like Conda are designed to solve.

A Conda package, then, is a file containing all files needed to make a given program execute correctly on a given system. Moreover, a Conda package can contain binary artifacts specific to a particular platform or operating system. Most packages (and their dependendencies) are available for Windows (win-32 or win-64), for OSX (osx-64), and for Linux (linux-32 or linux-64). A small number of Conda packages are available for more specialized platforms (e.g., Raspberry Pi 2 or POWER8 LE). As a user, you do not need to specify the platform since Conda will simply choose the Conda package appropriate for the platform you are using.

## What version of conda do I have?
The tool conda takes a variety of commands and arguments. Most of the time, you will use conda COMMAND OPTIONS --SWITCH. You will learn the collection of COMMANDs available in the next lessons. A summary is available on the help screen, which can be brought up by:

	(base) C:\Users\wonbi>conda --help

To check the version of conda:

	(base) C:\Users\wonbi>conda --version

## Install a conda package (I)
To get help with a particular command use the --help after the command

	(base) C:\Users\wonbi>conda install --help

## Install a conda package (II)
Installing a package is largely a matter of listing the name(s) of packages to install after the command conda install. But there is more to it behind the scenes. The versions of packages to install (along with all their dependencies) must be compatible with all versions of other software currently installed. Often this "satisfiability" constraint depends on choosing a package version compatible with a particular version of Python that is installed. Conda is special among "package managers" in that it always guarantees this consistency; you will see the phrase "Solving environment..." during installation to indicate this computation.

Suppose foo-lib is available in versions 1.0, 1.1, 1.2, 2.0, 2.1, 2.2, 2.3, 3.0, 3.1 (for your platform and Python version). As a first goal, conda attempts to choose the latest version of foo-lib. However, maybe foo-lib depends on bar-lib, which itself is available in various versions (say 1 through 20 in its versioning scheme). It might be that foo-lib 3.1 is compatible with bar-lib versions 17, 18, and 19; but blob-lib (which is already installed) is compatible only with versions of bar-lib less than 17. Therefore, conda would examine the compatibility of foo-lib 3.0 as a fallback. In this hypothetical, foo-lib 3.0 is compatible with bar-lib 16, so that version is chosen (bar-lib is also updated to the latest compatible version 16 in the same command if an earlier version is currently installed).

	(base) C:\Users\wonbi>conda --version
	(base) C:\Users\wonbi>conda install cytoolz -y --no-dep
The no dependencies install works for DC, but I should not use. 

## Which package version is installed?
Because conda installs packages automatically, it's hard to know which package versions are actually on your system. That is, packages you didn't install explicitly get installed for you to resolve another package's dependencies.

Fortunately, the command conda list comes to your aid to query the current state. By itself, this lists all packages currently installed.
You can use conda list --help to see how to extract specific packages from that list or how to display it in different formats.

	(base) C:\Users\wonbi>conda list

	(base) C:\Users\wonbi>conda list --help

To view the version of a specific package, use the positional arguments (regex). 

	(base) C:\Users\wonbi>conda list jupyter_core

## Install a specific version of a package (I)
One can specify the major version and allow conda to choose the most recent compatible minor version. The same principle applies to patches. 

	(base) C:\Users\wonbi>conda install attrs=17.3

## Install a specific version of a package (II)
To install versions 1.0 or any version of 1.4 (so skipping versions of 1.1, 1.2, and 1.3; possibly because of a bug). 

	(base) C:\Users\wonbi>conda install 'foo-lib=1.0|1.4*'

	(base) C:\Users\wonbi>conda install 'foo-lib>=1.4.0,<1.1'

	(base) C:\Users\wonbi>conda install 'attrs>16,<17.3'

## Update a conda package
The command 'conda update PKGNAME1 PKGNAME2 PKGNAME3' is used to perform updates. Update is somewhat less "aggressive" than install in the sense that installing a specific (later) version will revise the versions in the dependency tree to a greater extent than an update. Often update will simply choose a later PATCH version even though potentially a later MAJOR or MINOR version could be made compatible with other installed packages.

	(base) C:\Users\wonbi>conda update foo bar blob

	(base) C:\Users\wonbi>conda update cytoolz -y --no-dep
Again have to use the --no-dep switch to get desired update in DC. 

## Remove a conda package

	(base) C:\Users\wonbi>conda remove cytoolz

## Search for available package versions?

	(base) C:\Users\wonbi>conda search attrs

## Find dependencies for a package versions?
The syntax for information on a specific version of a package is: 'conda info PKGNAME=VERSION'. However, a version of a package will have been built for a variety of python versions. To specify the python version as well, 'conda info PKGNAME=VERSION=PYTHONVERSION'. 

You may use the * wildcard within the match pattern. This is often useful to match 'foo=1.2.3=py36*' because recent builds have attached the hash of the build at the end of the Python version string, making the exact match unpredicatable.
	
	(base) C:\Users\wonbi>conda info cytoolz=0.8.2=py36_0

	(base) C:\Users\wonbi>conda info numpy=1.13.1=py36*

## Channels and why are they needed?
All Conda packages we've seen so far were published on the main or default channel of Anaconda Cloud. A Conda channel is an identifier of a path (e.g., as in a web address) from which Conda packages can be obtained. Using the public cloud, installing without specifying a channel points to the main channel at https://repo.continuum.io/pkgs/main; where hundreds of packages are available. Although covering a wide swath, the main channel contains only packages that are (moderately) curated by Anaconda Inc. Given finite resources and a particular area focus, not all genuinely worthwhile packages are vetted by Anaconda Inc.

## Searching within channels (assumes that you know which channel the particular package is in)
If a particular colleague or other recognized user may have published a package useful to you, you can search for it using the 'conda search' command. For example, David Mertz, the principal author of this course, has a channel and Anaconda Cloud account called davidmertz. You can search his channel using the command below; the option --channel (or -c for short) specifies the channel to search. 

	(base) C:\Users\wonbi>conda search --channnel davidmertz --override-channels --platform linux-64

In the case above, the switch '--override-channels' is used to prevent searching on default channels. The switch '--platform linux-64' is used to select a platform that may differ from the one on which the search is run (absent the switch, the current computer's platform is used).

If you might want to know which versions of the package of 'textadapter' for the win-64 platform are available for any version of Python (assuming you know in which channels to look):

	(base) C:\Users\wonbi>conda search -c conda-forge -c sseefeld -c gbrener --platform win-64 textadapter

For the exercise, which of the channels used in the examples above could you find an osx-64 version of textadapter for Python 3.6? To solve, we'd have to use the following code:

	(base) C:\Users\wonbi>conda search -c davidmertz -c conda-forge -c sseefeld -c gbrener --platform osx-64 textadapter

## Searching across channels
Although the conda command and its subcommands are used for nearly everything in this course, the package anaconda-client provides the command anaconda that searches in a different manner that is often more useful. For instance, you may know the name of the textadapter package, but you may not know in which channel (or channels) it may be published (or by which users). You can search across all channels and all platforms using:

	(base) C:\Users\wonbi>anaconda search textadapter

Following this example, use anaconda search to determine the latest available version of the package boltons.

	(base) C:\Users\wonbi>anaconda search boltons

## Default, non-default, and special channels
The default channel on Anaconda Cloud is curated by Anaconda Inc., but another channel called conda-forge also has a special status. This channel does not operate any differently than other channels, whether those others are associated with an individual or organization, but it acts as a kind of "community curation" of relatively well-vetted packages. The GitHub page for the conda-forge project at https://github.com/conda-forge describes it as: "A community led collection of recipes, build infrastructure and distributions for the conda package manager."

Apart from the somewhat more organized conda-forge channel/project, Anaconda Cloud channels are relatively anarchic. Much like GitHub repos or packages on the Python Package Index (PyPI), anyone is free to upload whatever projects they like to conda-forge (as long as they are assembled as Conda packages, that is, but this is a minor restriction).

You should generally trust or rely only on packages sourced from reputable channels. There is no inherent rating system for channels or their packages. However, you are likely to trust your colleagues, your organization, well-known people in your software or data science communities, and so on.

conda-forge is almost certainly the most widely used channel on Anaconda Cloud. In fact, it has very many more packages than the main channel itself. Use the tools from this course to make a rough estimate of the number of packages available on the conda-forge channel for the linux-64 platform (i.e., the platform used for this session).
	
	(base) C:\Users\wonbi>conda search -c conda-forge --override-channel --platform linux-64 | wc

## Installing from a channel
We saw in the last exercise that there are about 30,000 linux-64 packages on conda-forge (the actual number is 66 thousand, as of July 2019). Across all the channels there are about 50,000 (significantly more as of July 2019) packages, most of those for at least 3 of of the 5 main platforms (osx-64, linux-32, linux-64, win-32, win-64; 32-bit support is of diminishing importance compared to 64-bit). There are around 2500 channels that have been active in the last 6 months; most are individual users, but a fair number belonging to projects or organizations. A majority of package names are published by more than one different channel; sometimes just as a copy, other times with a tweak or compiler optimization, or in a different version.

The whole point of having channels is to be able to install packages from them. For this exercise, you will install a version of a package not available on the default channel. Adding a channel to install from simply requires using the same --channel or -c switch we have seen in other conda commands, but with the conda install command: conda install --channel CHNLNAME PKGNAME


	(base) C:\Users\wonbi>conda install -c conda-forge youtube-dl -y --no-deps
	(base) C:\Users\wonbi>conda list youtube-dl

Note that the code above should not be used outside the DC environment. --no-deps (no dependencies): from conda install -h: "Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk." Used in DC to get over the various outdated packages, pythons, and other dependencies. 

## Environments and why they are needed
Conda environments allow multiple incompatible versions of the same (software) package to coexist on your system. An environment is simply a filepath containing a collection of mutually compatible packages. By isolating distinct versions of a given package (and their dependencies) in distinct environments, those versions are all available to work on particular projects or tasks.

There are a large number of reasons why it is best practice to use environments, whether as a data scientist, software developer, or domain specialist. Without the concept of environments, users essentially rely on and are restricted to whichever particular package versions are installed globally (or in their own user accounts) on a particular machine. Even when one user moves scripts between machines (or shares them with a colleague), the configuration is often inconsistent in ways that interfere with seamless functionality. Conda environments solve both these problems. You can easily maintain and switch between as many environments as you like, and each one has exactly the collection of packages that you want.

## Which environment am I using? 
When using 'conda', you are always in some environment, but it may be the default (called the 'base' or 'root' environment). Your current environment has a name and contains a collection of packages currently associated with that environment. There are a few ways to determine the current environment.

Most obviously, at a terminal prompt, the name of the current environment is usually prepended to the rest of your prompt in parentheses. Alternatively, the subcommand 'conda env list' displays a list of all environments on your current system; the currently activated one is marked with an asterisk in the middle column. The subcommands of 'conda env' (sometimes with suitable switches) encompass most of your needs for working with environments.

The output of 'conda env list' shows that each environment is associated with a particular directory. This is not the same as your current working directory for a given project; being "in" an environment is completely independent of the directory you are working in. Indeed, you often wish to preserve a certain Conda environment and edit resources across multiple project directories (all of which rely on the same environment). The environment directory displayed by 'conda env list' is simply the top-level filepath in which all resources associated with that environment are stored; you need never manipulate those environment directories directly (other than via the 'conda' command); indeed, it is much safer to leave those directories alone!

	(base) C:\Users\wonbi>conda env list

## What packages are installed in an environment? (I)
The command conda list seen previously displays all packages installed in the current environment. You can reduce this list by appending the particular package you want as an option. The package can be specified either as a simple name, or as a regular expression pattern. 

	(base) C:\Users\wonbi>conda list 'numpy|pandas'
The above code provides a list of the versions of numpy and pandas in the current environment (here the 'base' environment)

The following code would provide the version of numpy and pandas in the 'data-camp-exercises' environment (which we can tell by the prepended prompt).

	(data-camp-exercises)C:\Users\wonbi>conda list 'numpy|pandas'

## What packages are installed in an environment? (II)
It is often useful to query a different environment's configuration (i.e., as opposed to the currently active environment). You might do this simply to verify the package versions in that environment that you need for a given project. Or you may wish to find out what versions you or a colleague used in some prior project (developed in that other environment). The switch --name or -n allows you to query another environment. 

	(base) C:\Users\wonbi>conda list --name test_env 'numpy|pandas'
The --name switch identifies the environment name. 

Get the versions of numpy and pandas used in environment 'pg-2015'

	(base) C:\Users\wonbi>conda list -n pg-2015 'numpy|pandas'

## Switching between environments
Simply having different environments is not of much use; you need to be able to switch between environments. Most typically this is done at the command line, using the 'conda' command. With some other interfaces (like Anaconda Navigator or Jupyter with 'nb_conda' installed), other techniques for selecting environment are available. But for this course, you will learn about command-line use.

To activate an environment, you simply use 'conda activate ENVNAME'. To deactivate an environment, you use 'conda deactivate', which returns you to the root/base environment.

Go to course-env, then to pg-2015 and then to base environment

	(base) C:\Users\wonbi>conda env list
	(base) C:\Users\wonbi>conda activate course-env
	(course-env) C:\Users\wonbi>conda activate pg-2015
	(pg-2015) C:\Users\wonbi>cond deactivate
	(base) C:\Users\wonbi>

## Remove an environment
From time to time, it is worth cleaning up the environments you have accumulated just to make management easier. Doing so is not pressing; as they use little space or resources. But it's definitely useful to be able to see a list of only as many environments as are actually useful for you.

The command to remove an environment is:

	(base) C:\Users\wonbi>conda env remove --name ENVNAME
	(base) C:\Users\wonbi>conda env remove -n deprecated

## Create a new environment
The basic command for creating environments is conda create. You will always need to specify a name for your environment, using --name (or short form -n), and you may optionally specify packages (with optional versions) that you want in that environment intially. You do not need to specify any packages when creating; either way you can add or remove whatever packages you wish from an environment later.

	(base) C:\Users\wonbi>conda create --name recent-pd python=3.6 pandas=0.22 scipy statsmodels

Create a new environment, 'conda-essentials' that contains version 15.2 of 'attrs' and the latest available version of 'cytoolz'; switch into the new environment; check to see what packages are installed in the current environment:

	(base) C:\Users\wonbi>conda create -n conda-essentials attrs=15.2 cytoolz
	(base) C:\Users\wonbi>conda activate conda-essentials
	(conda-essentials)C:\Users\wonbi>conda list

## Export an environment
Using conda list provides useful information about the packages that are installed. However, the format it describes packages in is not immediately usable to let a colleague or yourself to recreate exactly the same environment on a different machine. For that you want the 'conda env export' command.

There are several optional switches to this command. If you specify '-n' or '--name' you can export an environment other than the active one. Without that switch it chooses the active environment. If you specify '-f' or '--file' you can output the environment specification to a file rather than just to the terminal output. If you are familiar with piping, you might prefer to pipe the output to a file rather than use the '--file' switch. By convention, the name 'environment.yml' is used for environment, but any name can be used (but the extension .yml is strongly encouraged).

Export the 'course-env' environment to the file 'course_env.yml'

	(base) C:\Users\wonbi>conda env export -n course-env -f course_env.yml

## Create an environment from a shared specification
You may recreate an environment from one of the YAML (Yet Another Markup Language) format files produced by conda env export. However, it is also easy to hand write an environment specification with less detail. For example, you might describe an environment you need and want to share with colleagues as follows:

	(base) C:\Users\wonbi>cat shared-project.yml
	name: shared-project
	channels:
	  - defaults
	dependencies
	  python=3.6
	  pandas>=.21
	  scikit-learn
	  statsmodels
Using 'cat' I read the shared-project.yml and it contained the information above. Clearly this version is much less specific than what conda env export produces. But it indicates the general tools, with some version specification, that will be required to work on a shared project. Actually creating an environment from this sketched out specification will fill in all the dependencies of those large projects whose packages are named, and this will install dozens of packages not explicitly listed. Often you are happy to have other dependencies in the manner conda decides is best.

	(base) C:\Users\wonbi>conda env create -n shared-project -f environment.yml
	(base) C:\Users\wonbi>conda env create -f shared-project.yml
The code above will create the 'shared-project' environment without -n switch because it is already written into the yml text. The same applise to the environment.yml code. 

## Compatibility with different versions
A common case for using environments is in developing scripts or Jupyter notebooks that rely on particular software versions for their functionality. Over time, the underlying tools might change, making updating the scripts worthwhile. Being able to switch between environments with different versions of the underlying packages installed makes this development process much easier.

The file 'weekly_humidity.py' is stored in the current session. First just take a look at it using the Unix tool 'cat'. You will see that the purpose of this script is rather trivial: it shows the last few days of the rolling mean of humidity taken from a data file. It would be easy to generalize this with switches to show different periods, different rolling intervals, different data sources, etc.

	(base) C:\Users\wonbi>cat weekly_humidity.py

Run the script in the base environment

	(base) C:\Users\wonbi>python weekly_humidity.py

The script ran and produced a little report of the rolling mean of humidity. However, it also produced some rather noisy complaints about deprecated syntax in the pandas library (called a FutureWarning). You now remember that you created this script a few years ago when you were using the 'pd-2015' environment. Switch to that environment and rerun the script. The report will be the same but no FutureWarning.

	(base) C:\Users\wonbi>conda activate pg-2015
	(base) C:\Users\wonbi>python weekly_humidity.py

## Updating a script
You certainly have the easy option to continue using the 'pd-2015' environment whenever you need to run the 'weekly_humidity.py' script. Environments can be kept around as long as you like and will assure that all your old scripts (and notebooks, libraries, etc) continue to run the same way they always have.

But quite likely you would like to update your script for your colleagues who use more recent versions of Python. Ideally, you would like them not to have to worry about this message:
	FutureWarning: pd.rolling_mean is deprecated for Series and will be removed in a future version, replace with
		       Series.rolling(window=7,center=False).mean()
		       print(pd.rolling_mean(humidity, 7).tail(5))
Note that the warning tells you what to do!

1) Read the weekly_humidity.py file:
	(base) C:\Users\wonbi>cat weekly_humidity.py

2) Edit the relevant portion: print(pd.rolling_mean(humidity, 7).tail(5)), should now read: print(humidity.rolling(7).mean().tail(5)). Use the vim editor within the terminal
	(base) C:\Users\wonbi>vim weekly_humidity.py 
Within the vim editor use shortcuts and insert methods available online.

3) Run the py file in base environment
	(base) C:\Users\wonbi>python weekly_humidity.py
No FutureWarning should appear.

4) Switch to pd-2015 environment and run
	(base) C:\Users\wonbi>conda activate pd-2015
	(pd-2015) C:\Users\wonbi>python weekly_humidity.py
Results in an error because the pandas version in the pd-2015 environment does not recognize DF.rolling(window).mean().tail() attributes. 
	